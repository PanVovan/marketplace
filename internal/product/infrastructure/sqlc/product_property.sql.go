// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: product_property.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createProductProperty = `-- name: CreateProductProperty :one
INSERT INTO product_properties (id, product_id, name, value) VALUES (
	uuid_generate_v4(),
	$1,
	$2,
	$3
) RETURNING id
`

type CreateProductPropertyParams struct {
	ProductID uuid.UUID `db:"product_id"`
	Name      string    `db:"name"`
	Value     string    `db:"value"`
}

func (q *Queries) CreateProductProperty(ctx context.Context, arg CreateProductPropertyParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createProductProperty, arg.ProductID, arg.Name, arg.Value)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteProductPropertiesByProductID = `-- name: DeleteProductPropertiesByProductID :exec
DELETE FROM product_properties WHERE product_id = $1
`

func (q *Queries) DeleteProductPropertiesByProductID(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductPropertiesByProductID, productID)
	return err
}

const deleteProductProperty = `-- name: DeleteProductProperty :exec
DELETE FROM product_properties WHERE id = $1
`

func (q *Queries) DeleteProductProperty(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteProductProperty, id)
	return err
}

const getProductPropertiesByProductID = `-- name: GetProductPropertiesByProductID :many
SELECT id, product_id, name, value FROM product_properties WHERE product_id = $1
`

func (q *Queries) GetProductPropertiesByProductID(ctx context.Context, productID uuid.UUID) ([]ProductProperty, error) {
	rows, err := q.db.QueryContext(ctx, getProductPropertiesByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductProperty
	for rows.Next() {
		var i ProductProperty
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductPropertyByID = `-- name: GetProductPropertyByID :one
SELECT id, product_id, name, value FROM product_properties WHERE id = $1
`

func (q *Queries) GetProductPropertyByID(ctx context.Context, id uuid.UUID) (ProductProperty, error) {
	row := q.db.QueryRowContext(ctx, getProductPropertyByID, id)
	var i ProductProperty
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Value,
	)
	return i, err
}
