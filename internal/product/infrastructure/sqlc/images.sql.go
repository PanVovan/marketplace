// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: images.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createImage = `-- name: CreateImage :one
INSERT INTO "product_images" (id, product_id, file) VALUES (
	uuid_generate_v4(),
	$1,
	$2
) RETURNING id
`

type CreateImageParams struct {
	ProductID uuid.UUID `db:"product_id"`
	File      string    `db:"file"`
}

func (q *Queries) CreateImage(ctx context.Context, arg CreateImageParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createImage, arg.ProductID, arg.File)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteImage = `-- name: DeleteImage :exec
DELETE FROM product_images WHERE id = $1
`

func (q *Queries) DeleteImage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteImage, id)
	return err
}

const deleteImagesByProductID = `-- name: DeleteImagesByProductID :exec
DELETE FROM product_images WHERE product_id = $1
`

func (q *Queries) DeleteImagesByProductID(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteImagesByProductID, productID)
	return err
}

const getImageByID = `-- name: GetImageByID :one
SELECT id, product_id, file FROM product_images WHERE id = $1
`

func (q *Queries) GetImageByID(ctx context.Context, id uuid.UUID) (ProductImage, error) {
	row := q.db.QueryRowContext(ctx, getImageByID, id)
	var i ProductImage
	err := row.Scan(&i.ID, &i.ProductID, &i.File)
	return i, err
}

const getImages = `-- name: GetImages :many
SELECT id, product_id, file FROM product_images
`

func (q *Queries) GetImages(ctx context.Context) ([]ProductImage, error) {
	rows, err := q.db.QueryContext(ctx, getImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductImage
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(&i.ID, &i.ProductID, &i.File); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getImagesByProductID = `-- name: GetImagesByProductID :many
SELECT id, product_id, file FROM product_images WHERE product_id = $1
`

func (q *Queries) GetImagesByProductID(ctx context.Context, productID uuid.UUID) ([]ProductImage, error) {
	rows, err := q.db.QueryContext(ctx, getImagesByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductImage
	for rows.Next() {
		var i ProductImage
		if err := rows.Scan(&i.ID, &i.ProductID, &i.File); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
