// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: product_category.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createProductCategory = `-- name: CreateProductCategory :exec
INSERT INTO products_categories(products_id, categories_id) VALUES ($1,$2)
`

type CreateProductCategoryParams struct {
	ProductsID   uuid.UUID `db:"products_id"`
	CategoriesID uuid.UUID `db:"categories_id"`
}

func (q *Queries) CreateProductCategory(ctx context.Context, arg CreateProductCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createProductCategory, arg.ProductsID, arg.CategoriesID)
	return err
}

const deleteProductCategory = `-- name: DeleteProductCategory :exec
DELETE FROM products_categories WHERE products_id = $1 AND categories_id = $2
`

type DeleteProductCategoryParams struct {
	ProductsID   uuid.UUID `db:"products_id"`
	CategoriesID uuid.UUID `db:"categories_id"`
}

func (q *Queries) DeleteProductCategory(ctx context.Context, arg DeleteProductCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteProductCategory, arg.ProductsID, arg.CategoriesID)
	return err
}

const getProductsCategories = `-- name: GetProductsCategories :many
SELECT products_id, categories_id FROM "products_categories" AS "products_categories" LIMIT $1 OFFSET $2
`

type GetProductsCategoriesParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) GetProductsCategories(ctx context.Context, arg GetProductsCategoriesParams) ([]ProductsCategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductsCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsCategory
	for rows.Next() {
		var i ProductsCategory
		if err := rows.Scan(&i.ProductsID, &i.CategoriesID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsCategoriesByCategoryID = `-- name: GetProductsCategoriesByCategoryID :many
SELECT products_id, categories_id FROM "products_categories" AS "products_categories" WHERE categories_id = $1 LIMIT $2 OFFSET $3
`

type GetProductsCategoriesByCategoryIDParams struct {
	CategoriesID uuid.UUID `db:"categories_id"`
	Limit        int32     `db:"limit"`
	Offset       int32     `db:"offset"`
}

func (q *Queries) GetProductsCategoriesByCategoryID(ctx context.Context, arg GetProductsCategoriesByCategoryIDParams) ([]ProductsCategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductsCategoriesByCategoryID, arg.CategoriesID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsCategory
	for rows.Next() {
		var i ProductsCategory
		if err := rows.Scan(&i.ProductsID, &i.CategoriesID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsCategoriesByProductID = `-- name: GetProductsCategoriesByProductID :many
SELECT products_id, categories_id FROM "products_categories" AS "products_categories" WHERE products_id = $1 LIMIT $2 OFFSET $3
`

type GetProductsCategoriesByProductIDParams struct {
	ProductsID uuid.UUID `db:"products_id"`
	Limit      int32     `db:"limit"`
	Offset     int32     `db:"offset"`
}

func (q *Queries) GetProductsCategoriesByProductID(ctx context.Context, arg GetProductsCategoriesByProductIDParams) ([]ProductsCategory, error) {
	rows, err := q.db.QueryContext(ctx, getProductsCategoriesByProductID, arg.ProductsID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductsCategory
	for rows.Next() {
		var i ProductsCategory
		if err := rows.Scan(&i.ProductsID, &i.CategoriesID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
