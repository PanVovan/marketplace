// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: seller.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createSeller = `-- name: CreateSeller :one
INSERT INTO sellers (id, name, email, password)
VALUES (uuid_generate_v4(), $1, $2, $3) RETURNING id
`

type CreateSellerParams struct {
	Name     string `db:"name"`
	Email    string `db:"email"`
	Password string `db:"password"`
}

func (q *Queries) CreateSeller(ctx context.Context, arg CreateSellerParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createSeller, arg.Name, arg.Email, arg.Password)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSeller = `-- name: DeleteSeller :exec
DELETE FROM sellers WHERE sellers.id = $1
`

func (q *Queries) DeleteSeller(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSeller, id)
	return err
}

const getSellerByEmail = `-- name: GetSellerByEmail :one
SELECT id, name, email, password FROM sellers as seller WHERE seller.email = $1
`

func (q *Queries) GetSellerByEmail(ctx context.Context, email string) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSellerByEmail, email)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getSellerByID = `-- name: GetSellerByID :one
SELECT id, name, email, password FROM sellers as seller WHERE seller.id = $1
`

func (q *Queries) GetSellerByID(ctx context.Context, id uuid.UUID) (Seller, error) {
	row := q.db.QueryRowContext(ctx, getSellerByID, id)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getSellers = `-- name: GetSellers :many
SELECT id, name, email, password FROM sellers as seller LIMIT $1 OFFSET $2
`

type GetSellersParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) GetSellers(ctx context.Context, arg GetSellersParams) ([]Seller, error) {
	rows, err := q.db.QueryContext(ctx, getSellers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Seller
	for rows.Next() {
		var i Seller
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
