// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: order_item.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items(id, order_id, name, price, quantity)
VALUES (uuid_generate_v4(), $1, $2, $3, $4) RETURNING id
`

type CreateOrderItemParams struct {
	OrderID  uuid.UUID `db:"order_id"`
	Name     string    `db:"name"`
	Price    float64   `db:"price"`
	Quantity int32     `db:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.Name,
		arg.Price,
		arg.Quantity,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM order_items WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, name, price, quantity FROM order_items LIMIT $1 OFFSET $2
`

type GetOrderItemsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) GetOrderItems(ctx context.Context, arg GetOrderItemsParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Name,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, order_id, name, price, quantity FROM order_items WHERE order_id = $1 LIMIT $2 OFFSET $3
`

type GetOrderItemsByOrderIDParams struct {
	OrderID uuid.UUID `db:"order_id"`
	Limit   int32     `db:"limit"`
	Offset  int32     `db:"offset"`
}

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, arg GetOrderItemsByOrderIDParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Name,
			&i.Price,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
