// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: rating.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createRating = `-- name: CreateRating :exec
INSERT INTO rating(id, user_id, product_id, rate) VALUES (uuid_generate_v4(), $1, $2, $3) RETURNING id
`

type CreateRatingParams struct {
	UserID    uuid.UUID `db:"user_id"`
	ProductID uuid.UUID `db:"product_id"`
	Rate      int32     `db:"rate"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) error {
	_, err := q.db.ExecContext(ctx, createRating, arg.UserID, arg.ProductID, arg.Rate)
	return err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM rating WHERE id = $1
`

func (q *Queries) DeleteRating(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteRating, id)
	return err
}

const getRatingByProductID = `-- name: GetRatingByProductID :one
SELECT AVG(rate) AS avg FROM rating WHERE product_id = $1
`

func (q *Queries) GetRatingByProductID(ctx context.Context, productID uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getRatingByProductID, productID)
	var avg string
	err := row.Scan(&avg)
	return avg, err
}
