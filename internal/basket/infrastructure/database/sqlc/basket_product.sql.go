// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: basket_product.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createBasketProduct = `-- name: CreateBasketProduct :one
INSERT INTO basket_products(id, basket_id, product_id, quantity) VALUES(uuid_generate_v4(), $1, $2, $3) RETURNING id
`

type CreateBasketProductParams struct {
	BasketID  uuid.UUID `db:"basket_id"`
	ProductID uuid.UUID `db:"product_id"`
	Quantity  int32     `db:"quantity"`
}

func (q *Queries) CreateBasketProduct(ctx context.Context, arg CreateBasketProductParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createBasketProduct, arg.BasketID, arg.ProductID, arg.Quantity)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBasketProduct = `-- name: DeleteBasketProduct :exec
DELETE FROM basket_products WHERE id = $1
`

func (q *Queries) DeleteBasketProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBasketProduct, id)
	return err
}

const deleteBasketProductByBasketID = `-- name: DeleteBasketProductByBasketID :exec
DELETE FROM basket_products WHERE basket_id = $1
`

func (q *Queries) DeleteBasketProductByBasketID(ctx context.Context, basketID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBasketProductByBasketID, basketID)
	return err
}

const deleteBasketProductByProductID = `-- name: DeleteBasketProductByProductID :exec
DELETE FROM basket_products WHERE product_id = $1
`

func (q *Queries) DeleteBasketProductByProductID(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBasketProductByProductID, productID)
	return err
}

const getBasketProductByID = `-- name: GetBasketProductByID :one
SELECT id, basket_id, product_id, quantity FROM basket_products WHERE id = $1
`

func (q *Queries) GetBasketProductByID(ctx context.Context, id uuid.UUID) (BasketProduct, error) {
	row := q.db.QueryRowContext(ctx, getBasketProductByID, id)
	var i BasketProduct
	err := row.Scan(
		&i.ID,
		&i.BasketID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getBasketProductByProductID = `-- name: GetBasketProductByProductID :one
SELECT id, basket_id, product_id, quantity FROM basket_products WHERE product_id = $1
`

func (q *Queries) GetBasketProductByProductID(ctx context.Context, productID uuid.UUID) (BasketProduct, error) {
	row := q.db.QueryRowContext(ctx, getBasketProductByProductID, productID)
	var i BasketProduct
	err := row.Scan(
		&i.ID,
		&i.BasketID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getBasketProducts = `-- name: GetBasketProducts :many
SELECT id, basket_id, product_id, quantity FROM basket_products LIMIT $1 OFFSET $2
`

type GetBasketProductsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) GetBasketProducts(ctx context.Context, arg GetBasketProductsParams) ([]BasketProduct, error) {
	rows, err := q.db.QueryContext(ctx, getBasketProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BasketProduct
	for rows.Next() {
		var i BasketProduct
		if err := rows.Scan(
			&i.ID,
			&i.BasketID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBasketProductsByBasketID = `-- name: GetBasketProductsByBasketID :many
 SELECT id, basket_id, product_id, quantity FROM basket_products WHERE basket_id = $1 LIMIT $2 OFFSET $3
`

type GetBasketProductsByBasketIDParams struct {
	BasketID uuid.UUID `db:"basket_id"`
	Limit    int32     `db:"limit"`
	Offset   int32     `db:"offset"`
}

func (q *Queries) GetBasketProductsByBasketID(ctx context.Context, arg GetBasketProductsByBasketIDParams) ([]BasketProduct, error) {
	rows, err := q.db.QueryContext(ctx, getBasketProductsByBasketID, arg.BasketID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BasketProduct
	for rows.Next() {
		var i BasketProduct
		if err := rows.Scan(
			&i.ID,
			&i.BasketID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
