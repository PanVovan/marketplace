// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: brand.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createBrand = `-- name: CreateBrand :one
INSERT INTO brands (id, name) VALUES (uuid_generate_v4(), $1) RETURNING id
`

func (q *Queries) CreateBrand(ctx context.Context, name string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createBrand, name)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteBrand = `-- name: DeleteBrand :exec
DELETE FROM brands WHERE brands.id = $1
`

func (q *Queries) DeleteBrand(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBrand, id)
	return err
}

const getBrandById = `-- name: GetBrandById :one
SELECT id, name FROM brands WHERE id = $1
`

func (q *Queries) GetBrandById(ctx context.Context, id uuid.UUID) (Brand, error) {
	row := q.db.QueryRowContext(ctx, getBrandById, id)
	var i Brand
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getBrands = `-- name: GetBrands :many
SELECT id, name FROM brands LIMIT $1 OFFSET $2
`

type GetBrandsParams struct {
	Limit  int32 `db:"limit"`
	Offset int32 `db:"offset"`
}

func (q *Queries) GetBrands(ctx context.Context, arg GetBrandsParams) ([]Brand, error) {
	rows, err := q.db.QueryContext(ctx, getBrands, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brand
	for rows.Next() {
		var i Brand
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
